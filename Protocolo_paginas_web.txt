🖥️ Fase 1: Desarrollo en Cursor (Editor de Código)
📂 Estructura y configuración inicial
 Crear repositorio GitHub y clonarlo en Cursor.

 Añadir .gitignore y .cursorignore para excluir:

node_modules/

Archivos de configuración sensibles (.env, secrets.json, etc.).

 Configurar variables de entorno con dotenv (o similar); nunca hardcodear claves en el código.

🔒 Seguridad del código
 Ejecutar npm audit y corregir vulnerabilidades (npm audit fix o parche manual).

 Integrar Snyk (o alternativa) en CI para escaneo periódico.

 Implementar sanitización y validación de todas las entradas (por ejemplo, con validator.js o DOMPurify).

 Añadir middleware (o código) para establecer cabeceras de seguridad en Node.js/Express:

Strict-Transport-Security

Content-Security-Policy

X-Frame-Options

X-Content-Type-Options

Referrer-Policy

⚙️ Funcionalidades básicas
 Chatbot

Configurar endpoint seguro (/webhook/chatbot).

Validar payload entrante antes de procesar.

Probar envío de correo con datos resumidos (SMTP o servicio externo).

 Formulario automatizado

Crear formulario HTML con validación en frontend y backend.

Endpoint /api/form que:

Sanitiza datos

Envía email con resumen al cliente

Responde con status adecuado (200/400/500)

🔍 SEO On-Page
 Incluir en cada página:

<title> único y descriptivo.

<meta name="description" content="…"> relevante.

<link rel="canonical" href="…"> si hay versiones duplicadas.

 Añadir OpenGraph para redes sociales:

html
Copiar
Editar
<meta property="og:title" content="…"/>
<meta property="og:description" content="…"/>
<meta property="og:image" content="https://…/preview.png"/>
 Implementar carga diferida de imágenes (loading="lazy").

 Añadir datos estructurados básicos (Schema.org) si aplica.

🗺️ Archivos de control de rastreo
 Crear sitemap.xml con todas las URLs importantes.

 Crear robots.txt en / apuntando al sitemap.xml.

🧪 Pruebas finales local
 Ejecutar auditoría de Lighthouse (performance, accesibilidad, best practices).

 Probar headers con curl -I https://localhost:PORT.

 Revisar consola y network en DevTools para errores JS o recursos bloqueados.

🌐 Fase 2: Despliegue, DNS y Posicionamiento
🌍 Dominio & DNS
 En WordPress.com (o tu registrador), apuntar dominio a:

Registro A (IP de hosting)

Registro CNAME (si aplica)

 Crear subdominios necesarios (chat.johnteamzai.com, etc.) con registros DNS.

🔐 HTTPS y cabeceras en infraestructura
 Si usas Cloudflare:

Apuntar DNS a Cloudflare.

Activar SSL/TLS (Flexible o Full).

Forzar Always Use HTTPS.

Habilitar Security Headers (HSTS, CSP, XFO, XCTO, Referrer).

 Si usas Vercel/Netlify/GitHub Pages: verificar HTTPS automático y redirect.

🚀 Subida e indexación
 Desplegar sitio en hosting elegido.

 Verificar acceso público a:

https://johnteamzai.com/

https://johnteamzai.com/sitemap.xml

https://johnteamzai.com/robots.txt

 Registrar y verificar dominio en Google Search Console.

 Subir sitemap.xml en Search Console y solicitar indexación.

⚙️ SEO y analítica
 Configurar Google Analytics o GTM.

 Probar cobertura de indexación en Search Console (Cobertura).

 Revisar PageSpeed Insights y optimizar recursos según recomendaciones.

 Configurar alertas de uptime (UptimeRobot, Freshping).

📄 Entrega al cliente
 Documentar accesos:

Repositorio GitHub

Panel de hosting/CDN (Cloudflare)

Google Search Console / Analytics

 Incluir manual breve de “Cómo actualizar contenido” (p. ej., cambiar texto, imágenes).

 Adjuntar informe de seguridad (resumen de auditorías y cabeceras activas).

 Checklist firmada; indicar fecha de entrega y plazos de soporte/mantenimiento.